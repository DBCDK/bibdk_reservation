<?php

module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_button');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation.action');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_1');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_2');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_3');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_4');

include_once 'bibdk_reservation_sb_kopi.inc';

/**
 * Implements hook_menu();
 */
function bibdk_reservation_menu() {
  $items['reservation'] = array(
    'title' => t('Make reservation', array(), array('context' => 'bibdk_reservation')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_reservation_create_wizard_form'),
    'access callback' => TRUE,
    'description' => t('Make reservation in 4 steps', array(), array('context' => 'bibdk_reservation')),
  );

  // ajax call for for checking reservability
  $items['reservation/ajax/%/%'] = array(
    'title' => 'ajax_check_reservability',
    'page callback' => 'bibdk_reservation_ajax_check_reservability',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'bibdk_reservation_button.inc'
  );

  $items['reservations/catalogue_url'] = array(
    'title' => 'local_catalogue_url',
    'page callback' => 'bibdk_reservation_catalog_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme();
 */
function bibdk_reservation_theme() {
  return array(
    'bibdk_reservation_agency' => array(
      'variables' => array('name', 'adress', 'postalCode', 'city', 'subdivision'),
      'template' => 'template/bibdk_reservation_agency',
    ),
    'bibdk_reservation_manifestation' => array(
      'variables' => array('title', 'author', 'type'),
      'template' => 'template/bibdk_reservation_manifestation',
    ),
    'bibdk_reservation_resume' => array(
      'variables' => array('resume' => array()),
      'template' => 'template/bibdk_reservation_resume',
    ),
    'bibdk_reservation_receipt' => array(
      'variables' => array('resume' => array()),
      'template' => 'template/bibdk_reservation_receipt',
    ),
    'bibdk_reservation_order_any_btn' => array(
      'variables' => array(
        'lists' => array(),
        'addi_attributes' => array(),
      ),
      'template' => 'template/bibdk_reservation_order_any_btn',
    ),
    'bibdk_reservation_order_any_btn_list' => array(
      'variables' => array('column' => '', 'items' => array()),
      'template' => 'template/bibdk_reservation_order_any_btn_list',
    ),
    'bibdk_reservation_order_any_btn_list_item' => array(
      'variables' => array('text', 'path', 'query', 'class', 'orderedOnce'),
      'template' => 'template/bibdk_reservation_order_any_btn_list_item',
    ),
  );
}

/**
 * Defines the steps in the reservation process
 * The file representing the step, should be written without .inc as it will be appended automatically
 *
 * @return Array
 */
function _bibdk_reservation_steps() {
  $steps = array(
    1 => array(
      'form' => 'bibdk_reservation_form_step_1',
      'current_step' => 1,
      'previous_step' => null,
      'next_step' => null,
      'title' => t('Choose Library', array(), array('context' => 'bibdk_reservation')),
    ),
    2 => array(
      'form' => 'bibdk_reservation_form_step_2',
      'current_step' => 2,
      'previous_step' => 1,
      'next_step' => 3,
      'title' => t('Add Personal Data', array(), array('context' => 'bibdk_reservation')),
    ),
    3 => array(
      'form' => 'bibdk_reservation_form_step_3',
      'current_step' => 3,
      'next button text' => t('Order', array(), array('context' => 'bibdk_reservation')), //overriding the default "Next" text on buttons
      'previous_step' => 2,
      'next_step' => 4,
      'title' => t('Review', array(), array('context' => 'bibdk_reservation')),
    ),
    4 => array(
      'form' => 'bibdk_reservation_form_step_4',
      'current_step' => 3,
      'previous_step' => null,
      'next_step' => 5,
      'title' => t('Order Complete', array(), array('context' => 'bibdk_reservation')),
    ),
  );
  return $steps;
}

/**
 * Initializes the form when a reservation button is clicked
 *
 * @param type $form
 * @param type $form_state
 * @return array $form
 */
function bibdk_reservation_create_wizard_form($form, &$form_state) {
  // Initialize a description of the steps for the wizard.
  if (empty($form_state['step']) || !empty($form_state['input']['favourite_selected'])) {
    bibdk_reservation_new_order_object();

    BibdkReservationOrderObject::GetObject()->setSbKopi(FALSE);
    if (isset($_GET['bestil_kopi'])) {
      // include methods
      BibdkReservationOrderObject::GetObject()->setSbKopi($_GET['bestil_kopi']);
    }

    if (bibdk_reservation_check_order_library($form_state)) {
      $form_state['step'] = 2;
    }
    else {
      // if no order library exists - set initial step to 1
      $form_state['step'] = 1;
    }

    $form_state['step_information'] = _bibdk_reservation_steps();
  }

  $step = $form_state['step'];
  drupal_set_title($form_state['step_information'][$step]['title']);

  // Get the form elements to display for this step.
  $form = $form_state['step_information'][$step]['form']($form, $form_state);

  // NAGIVATION
  $form['navigation'] = array(
    '#type' => 'container',
  );

  // Show the 'previous' button if appropriate.
  if ($form_state['step_information'][$step]['previous_step']) {
    $form['navigation']['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous', array(), array('context' => 'bibdk_reservation')),
      '#name' => 'prev',
      '#submit' => array('bibdk_reservation_wizard_previous_submit'),
      '#limit_validation_errors' => array(),
    );
  }

  // Show the Next button only if there are more steps defined.
  $next_step = $form_state['step_information'][$step]['next_step'];
  $total_steps = count($form_state['step_information']);
  if (isset($next_step) && $next_step <= $total_steps && !isset($form_state['blocked'])) { # && $step != 2) {
    // The Next button should be included on every step
    $form['navigation']['next'] = array(
      '#type' => 'submit',
      '#value' => isset($form_state['step_information'][$step]['next button text']) ? $form_state['step_information'][$step]['next button text'] : t('Next', array(), array('context' => 'bibdk_reservation')),
      '#name' => 'next',
      '#submit' => array('bibdk_reservation_wizard_next_submit'),
    );
  }
  else if (isset($next_step) && $next_step > $total_steps) {
    /* TODO: Implement in a more clean way */
    // Final submit button
    $button_text = isset($form_state['step_information'][$step]['next button text']) ? $form_state['step_information'][$step]['next button text'] : t('Finish', array(), array('context' => 'bibdk_reservation'));
    $form['navigation']['finish'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="JavaScript:window.close();" class="btn btn-blue form-submit" />' . $button_text . '</a>',
    );
    //Add a print button
    $form['navigation']['print'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="JavaScript:window.print();" class="btn btn-grey form-submit" />' . t('print', array(), array('context' => 'bibdk_reservation')) . '</a>',
    );
  }

  // Include each validation function defined for the different steps.

  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }

  $form['step_guide'] = bibdk_reservation_step_guide(array(), $form_state, $step);

  unset($form_state['blocked']);

  return $form;
}

function bibdk_reservation_check_order_library(&$form_state) {
  $sb_copy = BibdkReservationOrderObject::GetObject()->getSbKopi();
  if (!empty($sb_copy)) {
    // this is an order for 'statsbiblioteket' (820010)
    $agencyId = 820010;
    // fake a favourite agency
    $agency['oui:agencyId'] = $agencyId;
    $agency['oui:orderAgency'] = TRUE;
    // set favourite
    $favourite = new FavouriteAgency($agency);
    BibdkReservationOrderObject::GetObject()->setFavourite($favourite);

    return TRUE;
  }

  $favourites = _bibdk_favourite_get_from_webservice();
  $ret = FALSE;
  if (!empty($favourites)) {
    foreach ($favourites as $bibnr => $favourite) {
      $serialized_favs[$bibnr] = serialize($favourite);
    }
    //BibdkReservationOrderObject::GetObject()->setFavourites($favourites);
    BibdkReservationOrderObject::GetObject()->setFavourites($serialized_favs);
    foreach ($favourites as $favourite) {
      if ($favourite->getOrderAgency()) {
        BibdkReservationOrderObject::GetObject()->setFavourite($favourite);
        $ret = TRUE;
      }
    }

    $selected_branch_id = isset($form_state['input']['favouriteselector']) ? $form_state['input']['favouriteselector'] : NULL;
    // special case; order library changed to another favourite
    if (isset($selected_branch_id)) {
      $current_favouriteid = BibdkReservationOrderObject::GetObject()->getFavourite()->getAgencyId();
      foreach ($favourites as $favourite) {
        if ($favourite->getAgencyId() == $selected_branch_id && !empty($current_favouriteid)) {
          BibdkReservationOrderObject::GetObject()->setFavourite($favourite);
          // reset input - some fields are repeated
          $form_state['input'] = array();
        }
      }
    }
  }
  return $ret;
}

/**
 * Submit handler for the "previous" button.
 */
function bibdk_reservation_wizard_previous_submit($form, &$form_state) {
  $current_step = $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    isset($form_state['step_information'][$current_step]['previous_step']) ? $current_step = $form_state['step_information'][$current_step]['previous_step'] : $current_step;
    $form_state['values'] = isset($form_state['step_information'][$current_step]['stored_values']) ? $form_state['step_information'][$current_step]['stored_values'] : array();
    $form_state['step'] = $current_step;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the 'next' button.
 */
function bibdk_reservation_wizard_next_submit($form, &$form_state) {
  $current_step = $form_state['step'];
  /* Call custom submit function for current step */
  $current_submit_function = $form_state['step_information'][$current_step]['form'] . '_submit';
  if (function_exists($current_submit_function)) {
    call_user_func_array($current_submit_function, array($form, $form_state));
  }
  /* End custom submit */
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    $form_state['step'] = ++$current_step;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    $form_state['rebuild'] = TRUE; // Force rebuild with next step.
    return;
  }
}

/**
 * Submithandler for stepguide
 *
 * @param $form
 * @param $form_state
 */
function bibdk_reservation_wizard_goto_step_submit($form, &$form_state) {
  $next_step = $form_state['triggering_element']['#step'];
  $current_step = $form_state['step'];
  $form_state['step'] = $next_step;
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if (!empty($form_state['step_information'][$next_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$next_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  $form_state['rebuild'] = TRUE; // Force rebuild with next step.
  return;
}

/**
 * Creates the BibdkReservationOrderObject and saves the manifestation IDs to it
 */
function bibdk_reservation_new_order_object() {
  BibdkReservationOrderObject::reset();

  if (!isset($_REQUEST['ids'])) {
    drupal_set_message(t('No objects have been chosen', array(), array('context' => 'bibdk_reservation:error')), 'error');
    return NULL;
  }
  $ids = explode(",", $_REQUEST['ids']);

  BibdkReservationOrderObject::GetObject()->setManifestationIds($ids);

  $manifestation = bibdk_reservation_get_manifestation($ids);
  BibdkReservationOrderObject::GetObject()->setManifestation($manifestation);
  return BibdkReservationOrderObject::GetObject();
}

function bibdk_reservation_get_manifestation($id) {
  if (is_array($id)) {
    $id = reset($id);
  }

  $result = ting_openformat_get_single($id);
  $work = reset($result)->getManifestations();

  return reset($work);
}

function bibdk_reservation_manifestation_view($manifestation) {
  return ting_openformat_manifestation_view($manifestation, 'reservation');
}

function bibdk_reservation_step_guide($form, &$form_state, $current_step) {
  $form = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('form-step-guide'),
    ),
  );

  for ($step = 1; $step <= 4; $step++) {
    //Set classes
    $classes = array('inactive');
    if ($step < $current_step) {
      $classes = array('active');
    }
    else if ($step == $current_step || $current_step == 4) {
      $classes = array('btn-grey', 'btn');
    } // These classes is just for test - should be replaced with current
    // Create step button for $step
    $form[$step] = array(
      '#type' => 'submit',
      '#disabled' => ($step > $current_step || $current_step == 4) ? TRUE : FALSE,
      '#value' => t('step' . $step, array(), array('context' => 'bibdk_reservation')),
      '#attributes' => array('class' => $classes),
      '#submit' => array('bibdk_reservation_wizard_goto_step_submit'),
      '#step' => $step,
      '#limit_validation_errors' => array(),
    );
  }

  return $form;
}

/** Redirect to lookup url and update redirect statistics
 * @return string
 */
function bibdk_reservation_catalog_callback() {
  if (!isset($_GET['url']) || !isset($_GET['agency_id'])) {
    drupal_set_message(t('invalid url or agency_id'), 'ERROR');
    return '';
  }
  else {
    $agencyId = check_plain($_GET['agency_id']);
    $url = $_GET['url'];
    bibdk_openorder_do_incrementRedirectStat($agencyId);
    drupal_goto($url);
  }
}
