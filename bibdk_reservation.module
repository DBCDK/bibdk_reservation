<?php

module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_button');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_1');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_2');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_3');
module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_4');

/**
 * Implements hook_menu();
 */
function bibdk_reservation_menu() {
  $items['reservation'] = array(
    'title' => t('Make reservation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_reservation_create_wizard_form'),
    'access callback' => TRUE,
    'description' => t('Make reservation in 4 steps'),
  );

  return $items;
}

/**
 * Implements hook_theme();
 */
function bibdk_reservation_theme() {
  return array(
    'bibdk_reservation_agency' => array(
      'variables' => array('agency' => array()),
      'template' => 'template/bibdk_reservation_agency',
    ),
    'bibdk_reservation_resume' => array(
      'variables' => array('resume' => array()),
      'template' => 'template/bibdk_reservation_resume',
    ),
    'bibdk_reservation_receipt' => array(
      'variables' => array('resume' => array()),
      'template' => 'template/bibdk_reservation_receipt',
    ),
  );
}

/**
 * Defines the steps in the reservation process
 * The file representing the step, should be written without .inc as it will be appended automatically
 * @return Array
 */
function _bibdk_reservation_steps() {
  $steps = array(
    1 => array(
      'form' => 'bibdk_reservation_form_step_1',
      'current_step' => 1,
      'previous_step' => null,
      'next_step' => null,
      'title' => t('Choose Library'),
    ),
    2 => array(
      'form' => 'bibdk_reservation_form_step_2',
      'current_step' => 2,
      'previous_step' => 1,
      'next_step' => 3,
      'title' => t('Add Personal Data'),
    ),
    3 => array(
      'form' => 'bibdk_reservation_form_step_3',
      'current_step' => 3,
      'next button text' => t('Order'), //overriding the default "Next" text on buttons
      'previous_step' => 2,
      'next_step' => 4,
      'title' => t('Review'),
    ),
    4 => array(
      'form' => 'bibdk_reservation_form_step_4',
      'current_step' => 3,
      'previous_step' => null,
      'next_step' => 5,
      'title' => t('Order Complete'),
    ),
  );
  return $steps;
}

/**
 * Initializes the form when a reservation button is clicked
 * @param type $form
 * @param type $form_state
 * @return array $form
 */
function bibdk_reservation_create_wizard_form($form, &$form_state) {
  // Initialize a description of the steps for the wizard.
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;

    $form_state['step_information'] = _bibdk_reservation_steps();

    $order = bibdk_reservation_new_order_object();
    if (!isset($order))
      return;
    global $user;

    // Check if favorite library exists
    if (isset($_SESSION['bibdk_favourites'])){
      $branch = unserialize(current($_SESSION['bibdk_favourites']));
      BibdkReservationOrderObject::GetObject()->setBranch($branch);
      $form_state['step'] = 3;
    }
  }

  $step = $form_state['step'];
  drupal_set_title($form_state['step_information'][$step]['title']);

  $form['step_guide'] = bibdk_reservation_step_guide($form, $form_state, $step);

  // Get the form elements to display for this step.
  $form = $form_state['step_information'][$step]['form']($form, $form_state);

  // NAGIVATION
  $form['navigation'] = array(
    '#type' => 'container',
  );

  // Show the 'previous' button if appropriate.
  if ($form_state['step_information'][$step]['previous_step']) {
    $form['navigation']['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('bibdk_reservation_wizard_previous_submit'),
      '#limit_validation_errors' => array(),
    );
  }

  // Show the Next button only if there are more steps defined.
  $next_step = $form_state['step_information'][$step]['next_step'];
  $total_steps = count($form_state['step_information']);

  if (isset($next_step) && $next_step <= $total_steps && !isset($form_state['blocked'])) {# && $step != 2) {
// The Next button should be included on every step
    $form['navigation']['next'] = array(
      '#type' => 'submit',
      '#value' => isset($form_state['step_information'][$step]['next button text']) ? $form_state['step_information'][$step]['next button text'] : t('Next'),
      '#name' => 'next',
      '#submit' => array('bibdk_reservation_wizard_next_submit'),
    );
  }
  else if (isset($next_step) && $next_step > $total_steps) {
    /* TODO: Implement in a more clean way */
    // Final submit button
    $button_text = isset($form_state['step_information'][$step]['next button text']) ? $form_state['step_information'][$step]['next button text'] : t('Finish');
    $form['navigation']['finish'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="JavaScript:window.close();" />' . $button_text . '</a>',
    );
  }

  // Include each validation function defined for the different steps.
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }
  unset($form_state['blocked']);
  //dpm($form);
  return $form;
}

/**
 * Submit handler for the "previous" button.
 */
function bibdk_reservation_wizard_previous_submit($form, &$form_state) {
  $current_step = $form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    isset($form_state['step_information'][$current_step]['previous_step']) ? $current_step = $form_state['step_information'][$current_step]['previous_step'] : $current_step;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the 'next' button.
 */
function bibdk_reservation_wizard_next_submit($form, &$form_state) {
  $current_step = $form_state['step'];
  /* Call custom submit function for current step */
  $current_submit_function = $form_state['step_information'][$current_step]['form'] . '_submit';

  if (function_exists($current_submit_function)) {
    call_user_func_array($current_submit_function, array($form, $form_state));
  }
  /* End custom submit */
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    $current_step++;

    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    $form_state['rebuild'] = TRUE;  // Force rebuild with next step.
    return;
  }
}

/*
 * Submithandler for stepguide
 */
function bibdk_reservation_wizard_goto_step_submit($form, &$form_state) {
  $next_step = $form_state['triggering_element']['#step'];
  $current_step = $form_state['step'];
  $form_state['step'] = $next_step;
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if (!empty($form_state['step_information'][$next_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$next_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }
  $form_state['rebuild'] = TRUE;  // Force rebuild with next step.
  return;
}

/**
 * Creates the BibdkReservationOrderObject and saves the manifestation IDs to it
 */
function bibdk_reservation_new_order_object() {
  if (!isset($_REQUEST['ids'])) {
    drupal_set_message("No objects have been chosen", 'error');
    return;
  }
  $ids = explode(",", $_REQUEST['ids']);

  $order = BibdkReservationOrderObject::SetObject();
  $order->setManifestationIds($ids);

  $manifestation = bibdk_reservation_get_manifestation($ids);
  $order->setManifestation($manifestation);
  return $order;
}

function bibdk_reservation_get_order_object() {
  return $_SESSION['orderobject'];
}

function bibdk_reservation_get_manifestation($id) {
  if (is_array($id))
    $id = reset($id);

  $result = ting_openformat_get_single($id);
  $work = reset($result)->getManifestations();

  return reset($work);
}

function bibdk_reservation_manifestation_view($manifestation) {
  return ting_openformat_manifestation_view($manifestation, 'reservation');
}

function bibdk_reservation_step_guide($form, &$form_state, $current_step) {
  $labels = array(
    1 => t('Library'),
    2 => t('Borrower information'),
    3 => t('Confirm'),
    4 => t('Receipt'),
  );
  $form['step_guide'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('form-step-guide'),
    ),
  );
  $step_info = _bibdk_reservation_steps();
  for ($step = 1; $step <= 4; $step++) {
    //Set classes
    $classes = array('inactive');
    if ($step < $current_step)
      $classes = array('active');
    else if ($step == $current_step)
      $classes = array('btn-grey', 'btn'); // These classes is just for test - should be replaced with current

    // Create step button for $step
    $form['step_guide'][$step] = array(
      '#type' => 'submit',
      '#disabled' => ($step > $current_step) ? TRUE : FALSE,
      '#value' => 'step' . $step,
      '#attributes' => array('class' => $classes),
      '#submit' => array('bibdk_reservation_wizard_goto_step_submit'),
      '#step' => $step,
      '#limit_validation_errors' => array(),
    );
  }

  return $form;
}
