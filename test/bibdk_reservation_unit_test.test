<?php

class BibdkReservationUnitTestCase extends DrupalUnitTestCase {

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Bibdk Reservation Unit Tests'),
      'description' => t('Tests methods in bibdk_reservation module that doesn\'t require any db'),
      'group' => t('Bibliotek.dk - Reservation'),
    );
  }

  public function setUp() {
    module_load_include('inc', 'ting_openformat', 'ting_openformat.entities');
    module_load_include('inc', 'ting_openformat', 'lib/ManifestationMaster');
    module_load_include('inc', 'ting_openformat', 'lib/Manifestation');
    module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_button');
    parent::setUp();
  }

  public function test_bibdk_reservation_mail_get_title() {
    module_load_include('php', 'bibdk_reservation', 'test/mockup/objects/Manifestation_mockup');
    module_load_include('inc', 'bibdk_reservation', 'includes/bibdk_reservation.mail');

    $manifestation = new Manifestation_mockup();
    $manifestation->bibdk_order = 'titleSpecfic';
    $return = _bibdk_reservation_mail_get_title($manifestation);
    $this->assertEqual($return, ' - TITLESPECIFIC_RETURN', 'Got string as expected');

    $manifestation->bibdk_order = 'title';
    $return = _bibdk_reservation_mail_get_title($manifestation);
    $this->assertEqual($return, ' - TITLE_RETURN', 'Got string as expected');

    $manifestation->bibdk_order = 'no_title';
    $return = _bibdk_reservation_mail_get_title($manifestation);
    $this->assertEqual($return, '', 'Got empty string as expected');
  }

  public function test_ting_openformat_material_is_reservable() {
    $objects = json_decode(file_get_contents(drupal_get_path('module', 'bibdk_reservation') . '/test/mockup/test_objects.json'));

    $manifestationIsNotReservable = new Manifestation($objects->isNotReservable);
    $manifestationIsNot = new Manifestation($objects->isReservable);

    $this->assertFalse($this->_checkReservability($manifestationIsNotReservable), 'Manifestation is not reservable');
    $this->assertTrue($this->_checkReservability($manifestationIsNot), 'Manifestation is reservable');

    $this->assertFalse(array(), 'FALSE returned as expected when empty array given');
  }

  /**
   * @param $manifestation
   * @return bool
   */
  private function _checkReservability($manifestation) {
    return _ting_openformat_material_is_reservable(array($manifestation));
  }

  public function test__bibdk_reservation_generate_policy_messages() {
    module_load_include('inc', 'bibdk_reservation', 'test/mockup/bibdk_reservation_helpers_muckup');
    module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_form_step_2');

    /** test no policy message **/
    $policy_response = new PolicyResponseMockup();
    $result = _bibdk_reservation_generate_policy_messages($policy_response);
    $this->assertEqual($result, array(), 'returns empty array');

    /** test lookupUrl message **/
    // Setup mockup
    $policy_response = new PolicyResponseMockup();
    $policy_response->lookUpUrl[] = array(
      'url' => 'lookup_url',
      'agencyId' => 'agency_id',
    );
    $policy_response->agencyId = 'agency_id';
    // get result
    $result = _bibdk_reservation_generate_policy_messages($policy_response);
    // assert result
    $this->assertTrue($result['#text'] == 'link_to_local_library_lookup_url', 'lookup text returned');
    $this->assertTrue($result['#path'] == 'reservations/catalogue_url', 'lookup url returned');
    $this->assertTrue($result['#options']['query'] == array(
        'url' => 'lookup_url',
        'agency_id' => 'agency_id'
      ), 'query options are added');

    /** test catalogUrl message **/
    // Setup mockup
    $policy_response = new PolicyResponseMockup();
    $policy_response->agencyCatalogueUrl = 'catalog_url';
    // get result
    $result = _bibdk_reservation_generate_policy_messages($policy_response);
    // assert result
    $this->assertTrue($result['#text'] == 'link_to_local_library_catalogue_url', 'catalog url returned');
    $this->assertTrue($result['#path'] == 'catalog_url', 'catalog url returned');

    /** test consortia message **/
    // Setup mockup
    $policy_response = new PolicyResponseMockup();
    $policy_response->lookUpUrl[] = array(
      'url' => 'lookup_url',
      'agencyId' => 'consortia_id',
    );
    $policy_response->agencyId = 'agency_id';
    $policy_response->orderPossibleReason = 'not_owned_accepted_by_consortia';
    // get result
    $result = _bibdk_reservation_generate_policy_messages($policy_response);
    $expected_result = array(
      '#theme' => 'bibdk_reservation_consortia_message',
      '#agency_name' => 'agency_id_name',
      '#consortia_name' => 'consortia_id_name',
      '#url' => 'lookup_url',
    );
    // assert result
    $this->assertEqual($result, $expected_result, 'consortia theme array returned');
  }
}


/**
 * Class policyResponseMuckup
 * Mockup class to test _bibdk_reservation_generate_policy_messages
 */
class PolicyResponseMockup {

  public $lookUpUrl = array(), $agencyId, $orderPossibleReason, $agencyCatalogueUrl;

  public function getLookUpUrl() {
    return $this->lookUpUrl;

  }

  public function getAgencyCatalogueUrl() {
    return $this->agencyCatalogueUrl;
  }

  public function getOrderPossibleReason() {
    return $this->orderPossibleReason;
  }

  public function getAgencyId() {
    return $this->agencyId;
  }

}
