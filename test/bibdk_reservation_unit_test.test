<?php

class BibdkReservationUnitTestCase extends DrupalUnitTestCase {
  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Bibdk Reservation Unit Tests'),
      'description' => t('Tests methods in bibdk_reservation module that doesn\'t require any db'),
      'group' => t('Bibliotek.dk - Reservation'),
    );
  }

  public function setUp() {
    module_load_include('inc', 'ting_openformat', 'ting_openformat.entities');
    module_load_include('inc', 'ting_openformat', 'lib/ManifestationMaster');
    module_load_include('inc', 'ting_openformat', 'lib/Manifestation');
    module_load_include('inc', 'bibdk_reservation', 'bibdk_reservation_button');
    parent::setUp();
  }

  public function test_bibdk_reservation_mail_get_title() {
    module_load_include('php', 'bibdk_reservation', 'test/mockup/objects/Manifestation_mockup');
    module_load_include('php', 'bibdk_reservation', 'test/mockup/objects/Manifestation_mockup');
    drupal_load('module', 'bibdk_reservation');

    global $bibdk_order;
    $bibdk_order = 'titleSpecfic';

    $manifestation = new Manifestation_mockup();
    $return = _bibdk_reservation_mail_get_title($manifestation);
    $this->assertEqual($return, ' - TITLESPECIFIC_RETURN', 'Got string as expected');

    $bibdk_order = 'title';
    $return = _bibdk_reservation_mail_get_title($manifestation);
    $this->assertEqual($return, ' - TITLE_RETURN', 'Got string as expected');

    $bibdk_order = 'no_title';
    $return = _bibdk_reservation_mail_get_title($manifestation);
    $this->assertEqual($return, '', 'Got empty string as expected');
  }

  public function test_ting_openformat_material_is_reservable(){
    $objects = json_decode(file_get_contents(drupal_get_path('module', 'bibdk_reservation') . '/test/mockup/test_objects.json'));

    $manifestationIsNotReservable = new Manifestation($objects->isNotReservable);
    $manifestationIsNot = new Manifestation($objects->isReservable);

    $this->assertFalse($this->_checkReservability($manifestationIsNotReservable), 'Manifestation is not reservable');
    $this->assertTrue($this->_checkReservability($manifestationIsNot), 'Manifestation is reservable');

    $this->assertFalse(array(), 'FALSE returned as expected when empty array given');
  }

  /**
   * @param $manifestation
   * @return bool
   */
  private function _checkReservability($manifestation) {
    return _ting_openformat_material_is_reservable(array($manifestation));
  }

  public function test__bibdk_reservation_render_commands(){
    $infotext = array(
      'error' => array(
        'error_message',
      ),
    );
    $selector = 'css_selector';
    $result = _bibdk_reservation_render_commands($infotext, $selector);

    $this->assertTrue(is_array($result), 'Got array');
    $this->assertEqual(3, count($result), 'Got array of length 3');

    $this->assertEqual($result[1]['selector'], $selector, 'Found selector');
    $this->assertTrue(!empty($result[1]['data']), 'Found some rendered stuff');

    $result = _bibdk_reservation_render_commands(array(), $selector);
    $this->assertTrue(empty($result), 'Got empty array');
  }
}
