<?php

/**
* Test validation of fields and form submission
*/
class BibdkReservationButtonTestCase extends DrupalWebTestCase {
 
/**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array (
      'name' => t('Reservation button and infotexts'),
      'description' => t('Test if button is present on the right manifistations'),
      'group' => t('Reservation'),
    );
  }
  public function setUp() {
    $this->profile = 'bibdk';
    parent::setUp('bibdk_reservation', 'ting', 'ding_entity', 'ting_openformat');
    variable_set('clean_url', 1);
    variable_set('ting_agency', '100200');
    // TODO: Change link to muckup URL 
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/hive/'); 
  }
   
  public function testButtonsExists(){
     $this->drupalGet('/work/870970-basis%3A28960115');
     $this->assertFieldByName("op", "Order any edition","Manifestation Reservation Button Exists");
     $this->assertFieldByName("op", "Order this Lydbog (cd-mp3)","SubWork Reservation Button Exists");
  }
   
  public function testButtonIsMissing(){
    $this->drupalGet('/work/870970-basis:04727061');
    $this->assertText('870970-basis:04727061', "Page could be found");
    $this->assertTrue('Order this', "No Button Present on Manifestation");
    $this->assertTrue('Order any edition', "No Button Present on Subwork");
  }
  
  public function infoTextIsPresent(){
    $this->drupalGet('/work/870970-basis:25699815');
    $this->assertText('870970-basis:25699815', "Page could be found");
    $this->assertTrue('drupal_text_oldSBTB', "Infotext is present");
  }
  
  public function LinkIsPresent(){
    $this->drupalGet('/work/870970-basis:23108283');
    $this->assertText('870970-basis:23108283', "Page could be found");
    $this->assertTrue('Insert link here', "Link is present");
  }
  
}


class BibdkReservationFlow extends DrupalWebTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'Step 1 - 6 : User input and reservation',
      'description' => t('Test OpenAgency ServiceRequest & form submission'),
      'group' => 'Reservation',
    );
  }
  
  public function setUp() {
    $this->profile = 'bibdk';
    parent::setup(array('bibdk_reservation', 'bibdk_vejviser', 'openagency_webservice_mockup', 'ting'));
    global $base_url;
    variable_set('agency_search_url', $base_url.'/openagency_webservice/'); 
  }


  public function testServiceRequest() {
    $newUrl = variable_get('agency_search_url');
    $this->assertNotNull($newUrl, 'URL to mockup set: ' . $newUrl);
    $xml = '<?xml version="1.0" encoding="UTF-8"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"><SOAP-ENV:Body><serviceRequest><agencyId>DK-810010</agencyId><service>userOrderParameters</service><outputType>xml</outputType></serviceRequest></SOAP-ENV:Body></SOAP-ENV:Envelope>';
    $this->drupalPost('openagency_webservice_test', array('xml' => $xml), t('submit'));
    $this->assertText('userId', t('Mockup Agency serviceRequest passes'));
  }
  
  public function testMultiStepReservationForm (){
    /* STEP 1 */
    $this->drupalPost('reservation', NULL, t('Next'));
    $this->assertField('openagency_city', "Field \"city\" exists");
    $this->assertField('openagency_zip', "Field \"zip\" exists");
    $this->assertField('openagency_name', "Field \"name\" exists");
    $this->assertText('At least one kind of information should be provided', t('"No input" Error message appears correctly'));
    
    /* STEP 2 */
    $this->drupalPost('reservation', array('openagency_city' => 'kÃ¸benhavn'), t('Next'));
    $this->assertText('Hovedbiblioteket, Krystalgade', t('Agency search result correctly shown'));
    $this->assertFieldById('edit-button', t('Select'), 'Select button is present');
    
    /* STEP 3 */
    //Check if fields exist
    $this->drupalPost(NULL, NULL, t('Select'));
    
    $this->assertField("userId", "Field userId exists");
    $this->assertField("pincode", "Field pincode exists");
    $this->assertField("userName", "Field userName exists");
    
    $this->drupalPost(NULL, NULL, "Finish");
    
    //Check if required elements is set
    $this->assertText('Name field is required');
    $this->assertText('User ID field is required');
    $this->assertText('Pincode field is required');
    $this->assertText('Adress, postal code, town/city field is required');
    
    //Check custom validation
    $this->drupalPost(NULL, array('pincode' => '123123123'), "Finish");
    $this->assertText('Pincode needs to be a four diggit number');

    $this->drupalPost(NULL, array('userId' => '123123', 'pincode' => '1231', 'userName' => 'Test Testersen', 'userAddress' => 'testing 5'), "Finish");
    
    //Check if validation passes  
    $this->assertNoText('Name field is required');
    $this->assertNoText('User ID field is required');
    $this->assertNoText('Pincode field is required');
    $this->assertNoText('Adress, postal code, town/city field is required');
    $this->assertNoText('Pincode needs to be a four diggit number');
  }
}
